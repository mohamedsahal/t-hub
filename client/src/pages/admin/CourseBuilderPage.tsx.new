import { useParams, useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import DashboardLayout from "@/components/layout/DashboardLayout";
import HierarchicalCourseBuilder from "@/components/dashboard/HierarchicalCourseBuilder";
import { Button } from "@/components/ui/button";
import { ArrowLeft } from "lucide-react";

export default function CourseBuilderPage() {
  const [, setLocation] = useLocation();
  
  // Get the course ID from URL params
  const { courseId } = useParams<{ courseId: string }>();
  const id = courseId ? parseInt(courseId) : 0;
  
  // Fetch course info
  const { data: course } = useQuery({
    queryKey: ['/api/admin/courses', id],
    queryFn: async () => {
      try {
        const response = await apiRequest(`/api/admin/courses/${id}`);
        return response;
      } catch (error) {
        console.error("Failed to fetch course:", error);
        return null;
      }
    },
    enabled: id > 0
  });

  // Handle back button click
  const handleBackClick = () => {
    if (course && course.type) {
      // Redirect based on course type
      switch(course.type) {
        case 'short':
          setLocation('/admin/courses/short');
          break;
        case 'specialist':
          setLocation('/admin/courses/specialist');
          break;
        case 'bootcamp':
          setLocation('/admin/courses/bootcamp');
          break;
        case 'diploma':
          setLocation('/admin/courses/diploma');
          break;
        default:
          setLocation('/admin/courses');
      }
    } else {
      setLocation('/admin/courses');
    }
  };

  // Build the UI
  return (
    <DashboardLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div className="flex items-center">
            <Button variant="ghost" size="sm" onClick={handleBackClick} className="mr-2">
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div>
              <h1 className="text-2xl font-bold tracking-tight">Course Builder</h1>
              <p className="text-muted-foreground">
                {course ? `Building: ${course.title}` : 'Loading course...'}
              </p>
            </div>
          </div>
        </div>
        
        {id > 0 && <HierarchicalCourseBuilder courseId={id} />}
      </div>
    </DashboardLayout>
  );
}